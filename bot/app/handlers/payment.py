from aiogram import Router, F
from aiogram.types import CallbackQuery, LabeledPrice, PreCheckoutQuery, Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ..core.database import db
from ..keyboards.inline import (
    get_coin_packages_keyboard, get_gem_packages_keyboard,
    get_payment_method_keyboard
)
from ..core.config import GameConfig, settings

router = Router()


@router.callback_query(F.data == "buy_coins")
async def callback_buy_coins(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç"""
    text = (
        f"üí∞ <b>–ú–∞–≥–∞–∑–∏–Ω –º–æ–Ω–µ—Ç</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
        f"‚ú® –ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞!"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_coin_packages_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "buy_gems")
async def callback_buy_gems(callback: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ –≥–µ–º–æ–≤"""
    text = (
        f"üíé <b>–ú–∞–≥–∞–∑–∏–Ω –≥–µ–º–æ–≤</b>\n\n"
        f"–í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –≥–µ–º–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
        f"üíé –ì–µ–º—ã - –ø—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö –ø–æ–∫—É–ø–æ–∫!"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_gem_packages_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("coinpkg_"))
async def callback_coin_package(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –º–æ–Ω–µ—Ç"""
    package_index = int(callback.data.split("_")[1])
    package = GameConfig.COIN_PACKAGES[package_index]

    bonus = int(package['coins'] * package['bonus'] / 100) if package['bonus'] > 0 else 0
    total_coins = package['coins'] + bonus

    text = (
        f"üí∞ <b>–ü–∞–∫–µ—Ç –º–æ–Ω–µ—Ç</b>\n\n"
        f"ü™ô –ú–æ–Ω–µ—Ç: <b>{package['coins']}</b>\n"
    )

    if bonus > 0:
        text += f"üéÅ –ë–æ–Ω—É—Å: <b>+{bonus}</b> ({package['bonus']}%)\n"
        text += f"üì¶ –í—Å–µ–≥–æ: <b>{total_coins}</b> –º–æ–Ω–µ—Ç\n\n"
    else:
        text += f"\n"

    text += (
        f"üíµ –¶–µ–Ω–∞: <b>{package['price_rub']}‚ÇΩ</b>\n"
        f"‚≠ê –í –∑–≤—ë–∑–¥–∞—Ö: <b>{package['price_stars']}</b> Stars\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_payment_method_keyboard('coin', package_index)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("gempkg_"))
async def callback_gem_package(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –≥–µ–º–æ–≤"""
    package_index = int(callback.data.split("_")[1])
    package = GameConfig.GEM_PACKAGES[package_index]

    text = (
        f"üíé <b>–ü–∞–∫–µ—Ç –≥–µ–º–æ–≤</b>\n\n"
        f"üíé –ì–µ–º–æ–≤: <b>{package['gems']}</b>\n\n"
        f"üíµ –¶–µ–Ω–∞: <b>{package['price_rub']}‚ÇΩ</b>\n"
        f"‚≠ê –í –∑–≤—ë–∑–¥–∞—Ö: <b>{package['price_stars']}</b> Stars\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_payment_method_keyboard('gem', package_index)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("pay_"))
async def callback_payment_method(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
    parts = callback.data.split("_")
    method = parts[1]  # stars, yoomoney, sbp
    package_type = parts[2]  # coin –∏–ª–∏ gem
    package_index = int(parts[3])

    if package_type == 'coin':
        package = GameConfig.COIN_PACKAGES[package_index]
        bonus = int(package['coins'] * package['bonus'] / 100) if package['bonus'] > 0 else 0
        total_amount = package['coins'] + bonus
        currency_emoji = "üí∞"
        currency_name = "–º–æ–Ω–µ—Ç"
    else:
        package = GameConfig.GEM_PACKAGES[package_index]
        total_amount = package['gems']
        currency_emoji = "üíé"
        currency_name = "–≥–µ–º–æ–≤"

    if method == "stars":
        # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars
        if not settings.STARS_ENABLED:
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ Stars –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return

        try:
            # –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –¥–ª—è Stars
            await callback.message.answer_invoice(
                title=f"–ü–∞–∫–µ—Ç {currency_name}",
                description=f"{currency_emoji} {total_amount} {currency_name}",
                payload=f"{package_type}_{package_index}",
                provider_token="",  # –ü—É—Å—Ç–æ–π –¥–ª—è Stars
                currency="XTR",
                prices=[LabeledPrice(label=f"{total_amount} {currency_name}", amount=package['price_stars'])],
            )
            await callback.answer("‚ú® –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {str(e)}", show_alert=True)

    elif method == "yoomoney":
        # –ÆMoney
        if not settings.YOOMONEY_TOKEN:
            await callback.answer("‚ùå –ÆMoney –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆMoney API
        payment_url = f"https://yoomoney.ru/to/{settings.YOOMONEY_WALLET}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆMoney", url=payment_url)],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"buy_{package_type}s")]
        ])

        text = (
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney</b>\n\n"
            f"{currency_emoji} {total_amount} {currency_name}\n"
            f"üíµ –°—É–º–º–∞: <b>{package['price_rub']}‚ÇΩ</b>\n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
            f"@your_admin\n\n"
            f"‚ö†Ô∏è –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ:\n"
            f"<code>{callback.from_user.id}_{package_type}_{package_index}</code>"
        )

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    elif method == "sbp":
        # –°–ë–ü
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"buy_{package_type}s")]
        ])

        text = (
            f"üè¶ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü</b>\n\n"
            f"{currency_emoji} {total_amount} {currency_name}\n"
            f"üíµ –°—É–º–º–∞: <b>{package['price_rub']}‚ÇΩ</b>\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
            f"@your_admin\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: <code>{callback.from_user.id}</code>\n"
            f"–ò –∫–æ–¥ –ø–∞–∫–µ—Ç–∞: <code>{package_type}_{package_index}</code>"
        )

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –¥–ª—è Stars"""
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    payload = payment.invoice_payload

    try:
        parts = payload.split("_")
        package_type = parts[0]
        package_index = int(parts[1])

        if package_type == 'coin':
            package = GameConfig.COIN_PACKAGES[package_index]
            bonus = int(package['coins'] * package['bonus'] / 100) if package['bonus'] > 0 else 0
            total_coins = package['coins'] + bonus

            await db.add_coins(message.from_user.id, total_coins)
            await db.add_transaction(
                message.from_user.id,
                'purchase',
                payment.total_amount,
                'stars',
                f"–ö—É–ø–ª–µ–Ω–æ {total_coins} –º–æ–Ω–µ—Ç"
            )

            await message.answer(
                f"üéâ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: <b>{total_coins}</b> –º–æ–Ω–µ—Ç\n"
                f"{'üéÅ –í–∫–ª—é—á–∞—è –±–æ–Ω—É—Å: +' + str(bonus) if bonus > 0 else ''}\n\n"
                f"‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
            )

        else:  # gems
            package = GameConfig.GEM_PACKAGES[package_index]

            await db.add_gems(message.from_user.id, package['gems'])
            await db.add_transaction(
                message.from_user.id,
                'purchase',
                payment.total_amount,
                'stars',
                f"–ö—É–ø–ª–µ–Ω–æ {package['gems']} –≥–µ–º–æ–≤"
            )

            await message.answer(
                f"üéâ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                f"üíé –ü–æ–ª—É—á–µ–Ω–æ: <b>{package['gems']}</b> –≥–µ–º–æ–≤\n\n"
                f"‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
            )

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.telegram_payment_charge_id}"
        )
