from datetime import datetime, timedelta
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.core.database import Database
from app.states import UserStates
from app.keyboards import get_pet_keyboard, get_back_keyboard

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞
HUNGER_DECAY_PER_HOUR = 5
THIRST_DECAY_PER_HOUR = 7
HAPPINESS_DECAY_PER_HOUR = 3
FEED_VALUE = 25
WATER_VALUE = 30
PLAY_VALUE = 20


def get_status_icon(value):
    if value > 80:
        return "üòÉ"
    if value > 60:
        return "üôÇ"
    if value > 40:
        return "üòê"
    if value > 20:
        return "üòü"
    return "üò≠"


async def calculate_and_update_pet_stats(user_id: int, db: Database):
    pet = await db.get_pet(user_id)
    if not pet:
        return None

    last_updated = datetime.fromisoformat(pet["last_updated"])
    now = datetime.now()
    hours_passed = (now - last_updated).total_seconds() / 3600

    hunger = max(0, int(pet["hunger"] - hours_passed * HUNGER_DECAY_PER_HOUR))
    thirst = max(0, int(pet["thirst"] - hours_passed * THIRST_DECAY_PER_HOUR))
    happiness = max(0, int(pet["happiness"] - hours_passed * HAPPINESS_DECAY_PER_HOUR))

    await db.update_pet_stats(user_id, hunger, thirst, happiness)
    return await db.get_pet(user_id)


async def show_pet_status(message: Message, db: Database):
    pet = await calculate_and_update_pet_stats(message.from_user.id, db)
    if not pet:
        return

    text = f"""
üêæ **{pet['name']}** üêæ

{get_status_icon(pet['hunger'])} –ì–æ–ª–æ–¥: {pet['hunger']}/100
{get_status_icon(pet['thirst'])} –ñ–∞–∂–¥–∞: {pet['thirst']}/100
{get_status_icon(pet['happiness'])} –°—á–∞—Å—Ç—å–µ: {pet['happiness']}/100

–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?
"""
    # Use answer for commands and edit_text for callbacks
    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text, reply_markup=get_pet_keyboard())
    else:
        await message.answer(text, reply_markup=get_pet_keyboard())


@router.message(Command("pet"))
async def cmd_pet(message: Message, db: Database, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /pet - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–º"""
    pet = await db.get_pet(message.from_user.id)
    if pet:
        await show_pet_status(message, db)
    else:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –æ–¥–Ω–æ–≥–æ! –ö–∞–∫ –≤—ã –µ–≥–æ –Ω–∞–∑–æ–≤–µ—Ç–µ?")
        await state.set_state(UserStates.waiting_for_pet_name)


@router.message(UserStates.waiting_for_pet_name, F.text)
async def process_pet_name(message: Message, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞"""
    pet_name = message.text
    if len(pet_name) > 20:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    await db.create_pet(message.from_user.id, pet_name)
    await state.clear()
    await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è –ø–∏—Ç–æ–º–µ—Ü –ø–æ –∏–º–µ–Ω–∏ **{pet_name}**! üéâ\n\n"
                         f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pet, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
                         reply_markup=get_back_keyboard(), parse_mode="Markdown")


@router.callback_query(F.data.startswith("pet_"))
async def handle_pet_action(callback: CallbackQuery, db: Database):
    action = callback.data.split("_")[1]
    user_id = callback.from_user.id

    pet = await calculate_and_update_pet_stats(user_id, db)
    if not pet:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∏—Ç–æ–º—Ü–∞!", show_alert=True)
        return

    hunger, thirst, happiness = pet["hunger"], pet["thirst"], pet["happiness"]
    alert_text = ""

    if action == "feed":
        hunger = min(100, hunger + FEED_VALUE)
        happiness = min(100, happiness + 5)
        alert_text = f"–í—ã –ø–æ–∫–æ—Ä–º–∏–ª–∏ {pet['name']}! üçñ"
    elif action == "water":
        thirst = min(100, thirst + WATER_VALUE)
        happiness = min(100, happiness + 5)
        alert_text = f"–í—ã –Ω–∞–ø–æ–∏–ª–∏ {pet['name']}! üíß"
    elif action == "play":
        happiness = min(100, happiness + PLAY_VALUE)
        hunger = max(0, hunger - 5)
        thirst = max(0, thirst - 7)
        alert_text = f"–í—ã –ø–æ–∏–≥—Ä–∞–ª–∏ —Å {pet['name']}! üéæ"

    await db.update_pet_stats(user_id, hunger, thirst, happiness)
    await callback.answer(alert_text)
    await show_pet_status(callback, db)