from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import re

from ..core.database import db
from ..keyboards.inline import get_main_menu, get_pet_type_keyboard
from ..states.user_states import PetCreation
from ..core.config import GameConfig

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await state.clear()

    user = await db.get_user(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    referrer_id = None
    if message.text and len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        if ref_code.startswith('ref') and ref_code[3:].isdigit():
            referrer_id = int(ref_code[3:])

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        await db.create_user(
            message.from_user.id,
            message.from_user.username or message.from_user.first_name,
            referrer_id
        )
        user = await db.get_user(message.from_user.id)

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            "‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Pawer!</b> ‚ú®\n\n"
            "üêæ –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—ë—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–≤–æ–∏–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º!\n\n"
            "üíù <b>–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:</b>\n"
            "üçé –ö–æ—Ä–º–∏ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤–∫—É—Å–Ω–æ–π –µ–¥–æ–π\n"
            "‚öΩ –ò–≥—Ä–∞–π —Å –Ω–∏–º –≤ –≤–µ—Å—ë–ª—ã–µ –∏–≥—Ä—ã\n"
            "üõÅ –£—Ö–∞–∂–∏–≤–∞–π –∏ —Å–ª–µ–¥–∏ –∑–∞ —á–∏—Å—Ç–æ—Ç–æ–π\n"
            "‚ú® –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–π –≤–Ω–µ—à–Ω–æ—Å—Ç—å\n"
            "üéÅ –ü–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            "üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
            "üéâ –ù–∞—á–Ω–∏ —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞!"
        )

        await message.answer(
            welcome_text,
            reply_markup=get_main_menu(has_pet=False)
        )
    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π
        streak, reward = await db.update_streak(message.from_user.id)

        pet = await db.get_active_pet(message.from_user.id)

        if pet:
            if reward > 0:
                streak_text = (
                    f"üî• <b>–°–µ—Ä–∏—è –≤—Ö–æ–¥–æ–≤: {streak} –¥–Ω–µ–π!</b>\n"
                    f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {reward} –º–æ–Ω–µ—Ç\n\n"
                )

                if streak % 7 == 0:
                    streak_text += "üåü <b>–ù–µ–¥–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å! +5 –≥–µ–º–æ–≤!</b>\n\n"
                elif streak % 3 == 0:
                    streak_text += "‚≠ê <b>–ë–æ–Ω—É—Å –∑–∞ 3 –¥–Ω—è! +50 –º–æ–Ω–µ—Ç!</b>\n\n"
            else:
                streak_text = ""

            # –°—Ç–∞—Ç—É—Å –ø–∏—Ç–æ–º—Ü–∞
            status = get_pet_status_emoji(pet)

            text = (
                f"{streak_text}"
                f"üêæ <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!</b>\n\n"
                f"üíù –¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü <b>{pet['name']}</b> {GameConfig.PET_TYPES[pet['pet_type']]['emoji']} –∂–¥—ë—Ç —Ç–µ–±—è!\n\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b>\n"
                f"{status}"
            )
        else:
            text = "üêæ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!"

        await message.answer(
            text,
            reply_markup=get_main_menu(has_pet=bool(pet))
        )


@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    pet = await db.get_active_pet(callback.from_user.id)

    if pet:
        status = get_pet_status_emoji(pet)
        text = (
            f"üêæ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            f"üíù <b>{pet['name']}</b> {GameConfig.PET_TYPES[pet['pet_type']]['emoji']}\n"
            f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {pet['level']}\n\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b>\n"
            f"{status}"
        )
    else:
        text = "üêæ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"

    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu(has_pet=bool(pet))
    )


@router.callback_query(F.data == "create_pet")
async def callback_create_pet(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"""
    await state.set_state(PetCreation.choosing_name)

    await callback.message.edit_text(
        "‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞</b>\n\n"
        "üêæ –ü—Ä–∏–¥—É–º–∞–π –∏–º—è –¥–ª—è —Å–≤–æ–µ–≥–æ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞!\n\n"
        "üí° <i>–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤)</i>",
    )
    await callback.answer()


@router.message(PetCreation.choosing_name)
async def process_pet_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞"""
    name = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if not name or len(name) > 20:
        await message.answer(
            "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
        )
        return

    if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s]+$', name):
        await message.answer(
            "‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(name=name)
    await state.set_state(PetCreation.choosing_type)

    # –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —è–π—Ü–∞
    owned_eggs = await db.get_owned_eggs(message.from_user.id)
    owned_eggs.append('basic')  # –ë–∞–∑–æ–≤—ã–π –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω

    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∏–º—è - <b>{name}</b>!\n\n"
        f"ü•ö –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–π—Ü–æ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:\n\n"
        f"üí° <i>–ë–∞–∑–æ–≤—ã–π –∫–æ—Ç–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è–π—Ü–∞ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ</i>",
        reply_markup=get_pet_type_keyboard(owned_eggs)
    )


@router.callback_query(F.data.startswith("pettype_"))
async def callback_choose_pet_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–∏—Ç–æ–º—Ü–∞"""
    pet_type = callback.data.split("_")[1]
    data = await state.get_data()
    name = data.get('name')

    if not name:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start")
        return

    # –°–æ–∑–¥–∞—ë–º –ø–∏—Ç–æ–º—Ü–∞
    pet_id = await db.create_pet(callback.from_user.id, name, pet_type)
    await state.clear()

    info = GameConfig.PET_TYPES[pet_type]

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
    await callback.message.delete()

    celebration_msg = await callback.message.answer(
        f"üéâ‚ú®üéä\n\n"
        f"<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
        f"–¢–≤–æ–π –Ω–æ–≤—ã–π –¥—Ä—É–≥ {info['emoji']} <b>{name}</b> –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ —Å–≤–µ—Ç!\n\n"
        f"üíù –ó–∞–±–æ—Ç—å—Å—è –æ –Ω—ë–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        f"üéÆ –ò–≥—Ä–∞–π –∏ –≤–µ—Å–µ–ª–∏—Å—å –≤–º–µ—Å—Ç–µ\n"
        f"üìà –†–∞–∑–≤–∏–≤–∞–π—Å—è –∏ –ø–æ–ª—É—á–∞–π –Ω–∞–≥—Ä–∞–¥—ã\n\n"
        f"‚ú® <i>–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!</i>"
    )

    # –î–∞—ë–º –≤—Ä–µ–º—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å
    import asyncio
    await asyncio.sleep(3)

    await celebration_msg.edit_text(
        f"üêæ <b>–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º!</b>\n\n"
        f"{info['emoji']} <b>{name}</b>\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: 1\n\n"
        f"üìä <b>–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"üçñ –ì–æ–ª–æ–¥: 100%\n"
        f"üíñ –°—á–∞—Å—Ç—å–µ: 100%\n"
        f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: 100%\n"
        f"‚ú® –ß–∏—Å—Ç–æ—Ç–∞: 100%\n\n"
        f"üéÅ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å:\n"
        f"üí∞ 100 –º–æ–Ω–µ—Ç\n"
        f"üíé 5 –≥–µ–º–æ–≤",
        reply_markup=get_main_menu(has_pet=True)
    )

    await callback.answer("üéâ –ü–∏—Ç–æ–º–µ—Ü —Å–æ–∑–¥–∞–Ω!")


@router.callback_query(F.data == "profile")
async def callback_profile(callback: CallbackQuery):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db.get_user(callback.from_user.id)
    pet = await db.get_active_pet(callback.from_user.id)

    if not user or not pet:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        return

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    ref_code = f"ref{callback.from_user.id}"

    info = GameConfig.PET_TYPES[pet['pet_type']]
    exp_needed = GameConfig.exp_for_level(pet['level'])
    exp_progress = (pet['exp'] / exp_needed * 100) if exp_needed > 0 else 0

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{callback.from_user.id}</code>\n"
        f"üë§ –ò–º—è: {callback.from_user.first_name}\n\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: <b>{user['coins']}</b>\n"
        f"üíé –ì–µ–º—ã: <b>{user['gems']}</b>\n\n"
        f"üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: <b>{user['streak_days']}</b>\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{user['referral_count']}</b>\n\n"
        f"üêæ <b>–ê–∫—Ç–∏–≤–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü:</b>\n"
        f"{info['emoji']} {pet['name']}\n"
        f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {pet['level']}\n"
        f"üìä –û–ø—ã—Ç: {pet['exp']}/{exp_needed} ({exp_progress:.0f}%)\n\n"
        f"üîó –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:\n"
        f"<code>{ref_code}</code>"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu(has_pet=True)
    )
    await callback.answer()


def get_pet_status_emoji(pet: dict) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∏—Ç–æ–º—Ü–∞ —Å —ç–º–æ–¥–∑–∏"""

    def get_bar(value: int) -> str:
        if value >= 80:
            return "üü¢"
        elif value >= 50:
            return "üü°"
        elif value >= 30:
            return "üü†"
        else:
            return "üî¥"

    return (
        f"{get_bar(pet['hunger'])} –ì–æ–ª–æ–¥: {pet['hunger']}%\n"
        f"{get_bar(pet['happiness'])} –°—á–∞—Å—Ç—å–µ: {pet['happiness']}%\n"
        f"{get_bar(pet['energy'])} –≠–Ω–µ—Ä–≥–∏—è: {pet['energy']}%\n"
        f"{get_bar(pet['hygiene'])} –ß–∏—Å—Ç–æ—Ç–∞: {pet['hygiene']}%"
    )