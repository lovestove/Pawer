import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter

from app.states import UserStates
from app.keyboards import get_back_keyboard

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "feedback")
async def callback_feedback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    await callback.message.edit_text(
        "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_feedback)
    await callback.answer()


@router.message(StateFilter(UserStates.waiting_for_feedback))
async def process_feedback(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    feedback_text = message.text

    await message.answer(
        "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!</b>\n\n–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        reply_markup=get_back_keyboard(),
        parse_mode="HTML"
    )

    logger.info(f"Feedback from {message.from_user.id}: {feedback_text}")
    await state.clear()