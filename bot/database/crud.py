"""
CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""
from sqlalchemy.orm import Session
from .models import User, Pet, Item, UserItem, PetSkill
from datetime import datetime, timedelta
import random


# === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===

def get_or_create_user(db: Session, telegram_id: int, username: str = None, first_name: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ"""
    user = db.query(User).filter(User.telegram_id == telegram_id).first()

    if not user:
        user = User(
            telegram_id=telegram_id,
            username=username,
            first_name=first_name,
            coins=100,
            crystals=10  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å
        )
        db.add(user)
        db.commit()
        db.refresh(user)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º last_active
        user.last_active = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∏–∫ –ª–æ–≥–∏–Ω–æ–≤
        if user.last_login_date:
            days_diff = (datetime.now().date() - user.last_login_date.date()).days
            if days_diff == 1:
                user.login_streak += 1
            elif days_diff > 1:
                user.login_streak = 1

        user.last_login_date = datetime.now()
        db.commit()

    return user


def update_user_currency(db: Session, user_id: int, coins: int = 0, crystals: int = 0):
    """–û–±–Ω–æ–≤–∏—Ç—å –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(User).filter(User.id == user_id).first()
    if user:
        user.coins += coins
        user.crystals += crystals
        db.commit()
    return user


# === –ü–ò–¢–û–ú–¶–´ ===

def create_pet(db: Session, owner_id: int, name: str, species: str, personality: str,
               color: str = 'blue', pattern: str = 'solid'):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞"""
    pet = Pet(
        owner_id=owner_id,
        name=name,
        species=species,
        personality=personality,
        color=color,
        pattern=pattern,
        health=100,
        happiness=100,
        intelligence=50,
        energy=100
    )
    db.add(pet)
    db.commit()
    db.refresh(pet)
    return pet


def get_user_pets(db: Session, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return db.query(Pet).filter(Pet.owner_id == user_id).all()


def get_pet_by_id(db: Session, pet_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –ø–æ ID"""
    return db.query(Pet).filter(Pet.id == pet_id).first()


def update_pet_stats(db: Session, pet_id: int, **stats):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—ã –ø–∏—Ç–æ–º—Ü–∞

    –ü—Ä–∏–º–µ—Ä: update_pet_stats(db, pet_id, health=+10, happiness=+20)
    """
    pet = get_pet_by_id(db, pet_id)
    if not pet:
        return None

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—ã –∏ —Å–ª–µ–¥–∏–º —á—Ç–æ–±—ã –±—ã–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100
    if 'health' in stats:
        pet.health = max(0, min(100, pet.health + stats['health']))
    if 'happiness' in stats:
        pet.happiness = max(0, min(100, pet.happiness + stats['happiness']))
    if 'intelligence' in stats:
        pet.intelligence = max(0, min(100, pet.intelligence + stats['intelligence']))
    if 'energy' in stats:
        pet.energy = max(0, min(100, pet.energy + stats['energy']))

    db.commit()
    db.refresh(pet)
    return pet


def feed_pet(db: Session, pet_id: int, food_item: Item):
    """–ü–æ–∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞"""
    pet = get_pet_by_id(db, pet_id)
    if not pet:
        return None

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –µ–¥—ã
    pet.health = min(100, pet.health + food_item.health_effect)
    pet.happiness = min(100, pet.happiness + food_item.happiness_effect)
    pet.energy = min(100, pet.energy + food_item.energy_effect)
    pet.intelligence = min(100, pet.intelligence + food_item.intelligence_effect)

    pet.last_fed = datetime.now()

    db.commit()
    db.refresh(pet)
    return pet


def add_pet_xp(db: Session, pet_id: int, xp_amount: int):
    """–î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç –ø–∏—Ç–æ–º—Ü—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
    pet = get_pet_by_id(db, pet_id)
    if not pet:
        return None

    pet.xp += xp_amount

    # –§–æ—Ä–º—É–ª–∞ –¥–ª—è levelup: –Ω—É–∂–Ω–æ level * 100 XP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    xp_needed = pet.level * 100

    leveled_up = False
    while pet.xp >= xp_needed:
        pet.xp -= xp_needed
        pet.level += 1
        leveled_up = True
        xp_needed = pet.level * 100

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–≤–æ–ª—é—Ü–∏—é
        check_evolution(db, pet)

    db.commit()
    db.refresh(pet)

    return {'pet': pet, 'leveled_up': leveled_up}


def check_evolution(db: Session, pet: Pet):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é"""
    evolution_levels = [5, 15, 30, 50, 75]

    if pet.level in evolution_levels:
        new_stage = evolution_levels.index(pet.level) + 1
        if new_stage > pet.evolution_stage:
            pet.evolution_stage = new_stage
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞

    db.commit()


def play_with_pet(db: Session, pet_id: int, game_type: str = 'simple'):
    """–ò–≥—Ä–∞—Ç—å —Å –ø–∏—Ç–æ–º—Ü–µ–º"""
    pet = get_pet_by_id(db, pet_id)
    if not pet:
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
    if pet.energy < 10:
        return {'success': False, 'message': '–ü–∏—Ç–æ–º–µ—Ü —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª! –î–∞–π –µ–º—É –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üò¥'}

    # –¢—Ä–∞—Ç–∏–º —ç–Ω–µ—Ä–≥–∏—é
    pet.energy = max(0, pet.energy - 10)

    # –ü–æ–≤—ã—à–∞–µ–º —Å—á–∞—Å—Ç—å–µ –∏ –¥–∞–µ–º XP
    pet.happiness = min(100, pet.happiness + 15)
    pet.total_games_played += 1
    pet.last_played = datetime.now()

    xp_gained = random.randint(20, 50)
    result = add_pet_xp(db, pet_id, xp_gained)

    db.commit()

    return {
        'success': True,
        'message': '–û—Ç–ª–∏—á–Ω–æ –ø–æ–∏–≥—Ä–∞–ª–∏! üéÆ',
        'xp_gained': xp_gained,
        'leveled_up': result['leveled_up']
    }


def rest_pet(db: Session, pet_id: int):
    """–î–∞—Ç—å –ø–∏—Ç–æ–º—Ü—É –æ—Ç–¥–æ—Ö–Ω—É—Ç—å"""
    pet = get_pet_by_id(db, pet_id)
    if not pet:
        return None

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
    pet.energy = min(100, pet.energy + 30)
    pet.last_sleep = datetime.now()

    db.commit()
    db.refresh(pet)
    return pet


# === –ü–†–ï–î–ú–ï–¢–´ ===

def get_item_by_id(db: Session, item_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID"""
    return db.query(Item).filter(Item.id == item_id).first()


def get_all_items(db: Session, item_type: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ —Ç–∏–ø—É)"""
    query = db.query(Item)
    if item_type:
        query = query.filter(Item.item_type == item_type)
    return query.all()


def add_item_to_user(db: Session, user_id: int, item_id: int, quantity: int = 1):
    """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
    user_item = db.query(UserItem).filter(
        UserItem.user_id == user_id,
        UserItem.item_id == item_id
    ).first()

    if user_item:
        user_item.quantity += quantity
    else:
        user_item = UserItem(
            user_id=user_id,
            item_id=item_id,
            quantity=quantity
        )
        db.add(user_item)

    db.commit()
    db.refresh(user_item)
    return user_item


def get_user_inventory(db: Session, user_id: int, item_type: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = db.query(UserItem).filter(UserItem.user_id == user_id)

    if item_type:
        query = query.join(Item).filter(Item.item_type == item_type)

    return query.all()


def use_item(db: Session, user_id: int, item_id: int):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    user_item = db.query(UserItem).filter(
        UserItem.user_id == user_id,
        UserItem.item_id == item_id
    ).first()

    if not user_item or user_item.quantity <= 0:
        return {'success': False, 'message': '–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!'}

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    user_item.quantity -= 1

    if user_item.quantity == 0:
        db.delete(user_item)

    db.commit()

    return {'success': True, 'item': user_item.item}


# === –ù–ê–í–´–ö–ò ===

def learn_skill(db: Session, pet_id: int, skill_name: str, skill_type: str):
    """–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–∞–≤—ã–∫
    existing = db.query(PetSkill).filter(
        PetSkill.pet_id == pet_id,
        PetSkill.skill_name == skill_name
    ).first()

    if existing:
        return {'success': False, 'message': '–ü–∏—Ç–æ–º–µ—Ü —É–∂–µ –∑–Ω–∞–µ—Ç —ç—Ç–æ—Ç –Ω–∞–≤—ã–∫!'}

    skill = PetSkill(
        pet_id=pet_id,
        skill_name=skill_name,
        skill_type=skill_type
    )
    db.add(skill)
    db.commit()
    db.refresh(skill)

    return {'success': True, 'skill': skill}


def get_pet_skills(db: Session, pet_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –ø–∏—Ç–æ–º—Ü–∞"""
    return db.query(PetSkill).filter(PetSkill.pet_id == pet_id).all()


# === –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–û–í ===

def auto_update_pet_stats(db: Session):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–æ–≤ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    –ó–∞–ø—É—Å–∫–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–π —á–∞—Å)
    """
    all_pets = db.query(Pet).all()

    for pet in all_pets:
        now = datetime.now()

        # –°–Ω–∏–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è (–µ—Å–ª–∏ –Ω–µ –∫–æ—Ä–º–∏–ª–∏ > 4 —á–∞—Å–æ–≤)
        if (now - pet.last_fed).seconds > 14400:  # 4 —á–∞—Å–∞
            pet.health = max(5, pet.health - 5)  # –ù–µ –æ–ø—É—Å–∫–∞–µ–º –¥–æ 0, –º–∏–Ω–∏–º—É–º 5

        # –°–Ω–∏–∂–µ–Ω–∏–µ —Å—á–∞—Å—Ç—å—è (–µ—Å–ª–∏ –Ω–µ –∏–≥—Ä–∞–ª–∏ > 6 —á–∞—Å–æ–≤)
        if (now - pet.last_played).seconds > 21600:  # 6 —á–∞—Å–æ–≤
            pet.happiness = max(5, pet.happiness - 5)

        # –°–Ω–∏–∂–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ (–≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –Ω–µ —Å–ø–∞–ª > 3 —á–∞—Å–æ–≤)
        if (now - pet.last_sleep).seconds > 10800:  # 3 —á–∞—Å–∞
            pet.energy = max(0, pet.energy - 3)

    db.commit()