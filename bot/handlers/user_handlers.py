from aiogram import Router, F
import aiogram.types as types
from aiogram.types import Message, CallbackQuery, WebAppInfo
import aiogram.filters as filters
from keyboards.inline import inline_start_bot, inline_main_menu, inline_create_pet
from database import crud
from database.engine import get_db

router = Router()


@router.message(filters.CommandStart())
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = get_db()
    user = crud.get_or_create_user(
        db,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∏—Ç–æ–º—Ü—ã
    pets = crud.get_user_pets(db, user.id)

    if not pets:
        # –ï—Å–ª–∏ –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
        await message.answer(
            f"""
üåü <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Pawer</b> - –º–∏—Ä —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤!

–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:
üê± –í—ã—Ä–∞—Å—Ç–∏—Ç—å —Å–≤–æ–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
üíñ –ó–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –Ω—ë–º –∏ –∏–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ
‚öîÔ∏è –°—Ä–∞–∂–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
üé® –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
üèÜ –î–æ—Å—Ç–∏–≥–∞—Ç—å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –≤—ã—Å–æ—Ç!

<b>–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!</b>
            """,
            reply_markup=inline_start_bot(),
            parse_mode='HTML'
        )
    else:
        # –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        pet = pets[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        await message.answer(
            f"""
–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {message.from_user.first_name}! üëã

–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü <b>{pet.name}</b> –∂–¥—ë—Ç —Ç–µ–±—è!
–£—Ä–æ–≤–µ–Ω—å: {pet.level} | –ó–¥–æ—Ä–æ–≤—å–µ: {int(pet.health)}‚ù§Ô∏è
            """,
            reply_markup=inline_main_menu(),
            parse_mode='HTML'
        )


@router.callback_query(F.data == 'create_pet')
async def start_pet_creation(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"""
    await callback.message.edit_text(
        """
üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ - –®–∞–≥ 1/3</b>

<b>–í—ã–±–µ—Ä–∏ –≤–∏–¥ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:</b>

üê± <b>–ö–∏–±–µ—Ä–∫–æ—Ç</b> - –ª–æ–≤–∫–∏–π –∏ –±—ã—Å—Ç—Ä—ã–π
üêâ <b>–î—Ä–∞–∫–æ–Ω—á–∏–∫</b> - —Å–∏–ª—å–Ω—ã–π –∏ —Ö—Ä–∞–±—Ä—ã–π  
‚òÅÔ∏è <b>–û–±–ª–∞—á–∫–æ</b> - –º–∏–ª–æ–µ –∏ –¥–æ–±—Ä–æ–µ
ü§ñ <b>–†–æ–±–æ–ø—ë—Å</b> - —É–º–Ω—ã–π –∏ –≤–µ—Ä–Ω—ã–π
        """,
        reply_markup=inline_create_pet(),
        parse_mode='HTML'
    )


@router.callback_query(F.data.startswith('species_'))
async def choose_species(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –≤–∏–¥–∞ –ø–∏—Ç–æ–º—Ü–∞"""
    species = callback.data.split('_')[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM)
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ —Å—Ä–∞–∑—É

    species_emojis = {
        'cyber_cat': 'üê±',
        'dragon': 'üêâ',
        'cloud': '‚òÅÔ∏è',
        'robo_dog': 'ü§ñ'
    }

    species_names = {
        'cyber_cat': '–ö–∏–±–µ—Ä–∫–æ—Ç',
        'dragon': '–î—Ä–∞–∫–æ–Ω—á–∏–∫',
        'cloud': '–û–±–ª–∞—á–∫–æ',
        'robo_dog': '–†–æ–±–æ–ø—ë—Å'
    }

    await callback.message.edit_text(
        f"""
‚ú® <b>–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</b>

–¢–≤–æ–π {species_names[species]} {species_emojis[species]} –≥–æ—Ç–æ–≤ –∫ –∂–∏–∑–Ω–∏!

<b>–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –ø–∏—Ç–æ–º—Ü–∞?</b>
–ù–∞–ø–∏—à–∏ –∏–º—è –≤ —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–∞—Ä—Å–∏–∫, –î—Ä–∞–∫–æ—à–∞, –ü—É—à–æ–∫)
        """,
        parse_mode='HTML'
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ callback data –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await callback.answer()


@router.message(F.text, ~filters.Command())
async def handle_pet_name(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞"""
    db = get_db()
    user = crud.get_or_create_user(
        db,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–∏—Ç–æ–º–µ—Ü
    pets = crud.get_user_pets(db, user.id)

    if pets:
        # –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Mini App
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–º! üëá",
            reply_markup=inline_main_menu()
        )
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —Å –∏–º–µ–Ω–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    pet_name = message.text[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏

    # –°–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∏–±–µ—Ä–∫–æ—Ç)
    pet = crud.create_pet(
        db,
        owner_id=user.id,
        name=pet_name,
        species='cyber_cat',
        personality='playful',
        color='blue',
        pattern='solid'
    )

    # –î–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –µ–¥—É –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å

    await message.answer(
        f"""
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b>

–¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü <b>{pet.name}</b> —Ä–æ–¥–∏–ª—Å—è! üê±‚ú®

<b>–°—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {int(pet.health)}
üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {int(pet.happiness)}
üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {int(pet.intelligence)}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {int(pet.energy)}

<b>–¢—ã –ø–æ–ª—É—á–∏–ª:</b>
ü™ô 100 –º–æ–Ω–µ—Ç
üíé 10 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
üçû 3x –•–ª–µ–± (—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –µ–¥–∞)

–û—Ç–∫—Ä–æ–π Mini App —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –ø–∏—Ç–æ–º—Ü–µ! üëá
        """,
        reply_markup=inline_main_menu(),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'main_menu')
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å Mini App"""
    db = get_db()
    user = crud.get_or_create_user(
        db,
        telegram_id=callback.from_user.id
    )

    pets = crud.get_user_pets(db, user.id)

    if not pets:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –°–æ–∑–¥–∞–π –µ–≥–æ:",
            reply_markup=inline_start_bot()
        )
        return

    pet = pets[0]

    await callback.message.edit_text(
        f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

<b>{pet.name}</b> - –£—Ä–æ–≤–µ–Ω—å {pet.level}

‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {int(pet.health)}
üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {int(pet.happiness)}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {int(pet.energy)}

üí∞ –¢–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã:
ü™ô {user.coins} –º–æ–Ω–µ—Ç
üíé {user.crystals} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤

–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è! üëá
        """,
        reply_markup=inline_main_menu(),
        parse_mode='HTML'
    )
    await callback.answer()


@router.callback_query(F.data == 'quick_feed')
async def quick_feed(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ (—Ö–ª–µ–±–æ–º)"""
    db = get_db()
    user = crud.get_or_create_user(db, telegram_id=callback.from_user.id)
    pets = crud.get_user_pets(db, user.id)

    if not pets:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–∏—Ç–æ–º—Ü–∞!", show_alert=True)
        return

    pet = pets[0]

    # –î–∞–µ–º –±–∞–∑–æ–≤—É—é –µ–¥—É (—Ö–ª–µ–±: +10 –∑–¥–æ—Ä–æ–≤—å–µ, +5 —Å—á–∞—Å—Ç—å–µ)
    updated_pet = crud.update_pet_stats(
        db,
        pet.id,
        health=10,
        happiness=5
    )

    # –î–∞–µ–º XP
    xp_result = crud.add_pet_xp(db, pet.id, 10)

    msg = f"üçû {pet.name} –ø–æ–∫—É—à–∞–ª!\n"
    if xp_result['leveled_up']:
        msg += f"üéâ –£–†–û–í–ï–ù–¨ –ü–û–í–´–®–ï–ù –¥–æ {xp_result['pet'].level}!"

    await callback.answer(msg, show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

<b>{updated_pet.name}</b> - –£—Ä–æ–≤–µ–Ω—å {updated_pet.level}

‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {int(updated_pet.health)}
üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {int(updated_pet.happiness)}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {int(updated_pet.energy)}

üí∞ –¢–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã:
ü™ô {user.coins} –º–æ–Ω–µ—Ç
üíé {user.crystals} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
        """,
        reply_markup=inline_main_menu(),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'quick_play')
async def quick_play(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞"""
    db = get_db()
    user = crud.get_or_create_user(db, telegram_id=callback.from_user.id)
    pets = crud.get_user_pets(db, user.id)

    if not pets:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –ø–∏—Ç–æ–º—Ü–∞!", show_alert=True)
        return

    pet = pets[0]

    # –ò–≥—Ä–∞–µ–º
    result = crud.play_with_pet(db, pet.id, 'simple')

    if not result['success']:
        await callback.answer(result['message'], show_alert=True)
        return

    msg = f"üéÆ {result['message']}\n+{result['xp_gained']} XP"
    if result['leveled_up']:
        msg += f"\nüéâ –£–†–û–í–ï–ù–¨ –ü–û–í–´–®–ï–ù!"

    await callback.answer(msg, show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    updated_pet = crud.get_pet_by_id(db, pet.id)

    await callback.message.edit_text(
        f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

<b>{updated_pet.name}</b> - –£—Ä–æ–≤–µ–Ω—å {updated_pet.level}

‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {int(updated_pet.health)}
üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {int(updated_pet.happiness)}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {int(updated_pet.energy)}

üí∞ –¢–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã:
ü™ô {user.coins} –º–æ–Ω–µ—Ç
üíé {user.crystals} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
        """,
        reply_markup=inline_main_menu(),
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'pet_stats')
async def show_pet_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞"""
    db = get_db()
    user = crud.get_or_create_user(db, telegram_id=callback.from_user.id)
    pets = crud.get_user_pets(db, user.id)

    if not pets:
        await callback.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞!", show_alert=True)
        return

    pet = pets[0]
    skills = crud.get_pet_skills(db, pet.id)

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    xp_needed = pet.level * 100
    xp_progress = int((pet.xp / xp_needed) * 100)

    skills_text = ""
    if skills:
        skills_text = "\n\n<b>üéØ –ù–∞–≤—ã–∫–∏:</b>\n"
        for skill in skills[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            skills_text += f"‚Ä¢ {skill.skill_name} (—É—Ä. {skill.level})\n"

    await callback.message.edit_text(
        f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–æ–º—Ü–∞</b>

<b>–ò–º—è:</b> {pet.name}
<b>–í–∏–¥:</b> {pet.species}
<b>–•–∞—Ä–∞–∫—Ç–µ—Ä:</b> {pet.personality}

<b>‚≠ê –£—Ä–æ–≤–µ–Ω—å {pet.level}</b>
–û–ø—ã—Ç: {pet.xp}/{xp_needed} ({xp_progress}%)

<b>üìà –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {int(pet.health)}/100
üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {int(pet.happiness)}/100
üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {int(pet.intelligence)}/100
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {int(pet.energy)}/100

<b>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {pet.total_games_played}
‚öîÔ∏è –ü–æ–±–µ–¥ –≤ –±–æ—è—Ö: {pet.battles_won}
üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {pet.battles_lost}

<b>üé≠ –≠–≤–æ–ª—é—Ü–∏—è:</b>
–°—Ç–∞–¥–∏—è: {pet.evolution_stage}/4
–ü—É—Ç—å: {pet.evolution_path}
{skills_text}

<i>–ü–∏—Ç–æ–º–µ—Ü —Å —Ç–æ–±–æ–π —É–∂–µ {(callback.message.date - pet.created_at).days} –¥–Ω–µ–π</i>
        """,
        reply_markup=inline_main_menu(),
        parse_mode='HTML'
    )
    await callback.answer()


@router.message(filters.Command(commands=['stats']))
async def cmd_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    db = get_db()
    user = crud.get_or_create_user(
        db,
        telegram_id=message.from_user.id
    )

    pets = crud.get_user_pets(db, user.id)

    if not pets:
        await message.answer(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å.",
            reply_markup=inline_start_bot()
        )
        return

    pet = pets[0]

    await message.answer(
        f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üë§ –ò–≥—Ä–æ–∫:</b>
–ò–º—è: {user.first_name}
–°—Ç—Ä–∏–∫ –ª–æ–≥–∏–Ω–æ–≤: {user.login_streak} –¥–Ω–µ–π üî•
ü™ô –ú–æ–Ω–µ—Ç—ã: {user.coins}
üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: {user.crystals}

<b>üêæ –ü–∏—Ç–æ–º–µ—Ü: {pet.name}</b>
–£—Ä–æ–≤–µ–Ω—å: {pet.level}
‚ù§Ô∏è {int(pet.health)} | üòä {int(pet.happiness)} | ‚ö° {int(pet.energy)}

–ò—Å–ø–æ–ª—å–∑—É–π Mini App –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è! üëá
        """,
        reply_markup=inline_main_menu(),
        parse_mode='HTML'
    )


@router.message(filters.Command(commands=['help']))
async def cmd_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    await message.answer(
        """
<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ Pawer</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>

1Ô∏è‚É£ <b>–ó–∞–±–æ—Ç—å—Å—è –æ –ø–∏—Ç–æ–º—Ü–µ</b>
   ‚Ä¢ –ö–æ—Ä–º–∏ –µ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ üçï
   ‚Ä¢ –ò–≥—Ä–∞–π —Å –Ω–∏–º üéÆ
   ‚Ä¢ –î–∞–≤–∞–π –æ—Ç–¥—ã—Ö–∞—Ç—å üò¥

2Ô∏è‚É£ <b>–ö–∞—á–∞–π —É—Ä–æ–≤–µ–Ω—å</b>
   ‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π –¥–µ–π—Å—Ç–≤–∏—è ‚Üí –ø–æ–ª—É—á–∞–π XP
   ‚Ä¢ –ü–æ–≤—ã—à–∞–π —É—Ä–æ–≤–µ–Ω—å ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–π —ç–≤–æ–ª—é—Ü–∏–∏

3Ô∏è‚É£ <b>–†–∞–∑–≤–∏–≤–∞–π –ø–∏—Ç–æ–º—Ü–∞</b>
   ‚Ä¢ –£—á–∏ –Ω–æ–≤—ã–º –Ω–∞–≤—ã–∫–∞–º
   ‚Ä¢ –≠–∫–∏–ø–∏—Ä—É–π –ø—Ä–µ–¥–º–µ—Ç—ã
   ‚Ä¢ –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥

4Ô∏è‚É£ <b>–°—Ä–∞–∂–∞–π—Å—è –∏ –ø–æ–±–µ–∂–¥–∞–π</b>
   ‚Ä¢ PvP –±–æ–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
   ‚Ä¢ –¢—É—Ä–Ω–∏—Ä—ã —Å –∫—Ä—É—Ç—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏
   ‚Ä¢ –ë–æ—Å—Å-—Ä–µ–π–¥—ã –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏

<b>üí° –°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ó–∞—Ö–æ–¥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –±–æ–Ω—É—Å–æ–≤
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π –∫–æ—Ä–º–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π –≤ –∏–≤–µ–Ω—Ç–∞—Ö –¥–ª—è –Ω–∞–≥—Ä–∞–¥

<b>–û—Ç–∫—Ä–æ–π Mini App –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞! üëá</b>
        """,
        reply_markup=inline_main_menu(),
        parse_mode='HTML'
    )